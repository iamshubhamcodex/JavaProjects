package snakeGame;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.Timer;
import javax.swing.WindowConstants;

public class Game extends JFrame implements ActionListener {
	private static final long serialVersionUID = 1L;
	public Timer t = new Timer(100, this);

	static Snake snake;
	static Food food;
	static int wid = 780, hei = 760, dim = 20;
	static JFrame frame;

	public Game() {
		frame = new JFrame("SNAKE GAME");
		frame.setBounds(1000, 100, wid + 15, hei + 38);

		snake = new Snake();
		food = new Food(snake.body);
		t.start();

		JPanel pn = new JPanel() {
			private static final long serialVersionUID = 1L;

			@Override
			public void paint(Graphics g) {
				g.setColor(Color.black);
				g.fillRect(0, 0, wid, hei);

				if (!snake.getEnd()) {
					g.setColor(Color.green);
					g.fillRect(food.x * dim, food.y * dim, dim, dim);

					g.setColor(Color.red);
					for (Rectangle r : snake.getBody()) {
						g.fillRect(r.x, r.y, dim, dim);
					}

					g.setColor(Color.white);
					g.drawOval(snake.getBody().get(0).x + 12, snake.getBody().get(0).y + 8, 4, 4);
					g.drawOval(snake.getBody().get(0).x + 4, snake.getBody().get(0).y + 8, 4, 4);

					g.setFont(new Font(Font.SANS_SERIF, 0, 20));
					g.drawString("Score: " + (snake.body.size() - 3), 690, 20);
				} else {
					g.setColor(Color.white);
					g.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 45));
					g.drawString("End of the Game", 215, 340);
					g.setFont(new Font(Font.SANS_SERIF, 0, 28));
					g.drawString("Your Score " + (snake.body.size() - 3), 300, 370);
					g.setFont(new Font(Font.SERIF, Font.ITALIC, 18));
					g.drawString("Press any key to Play Again", 290, 730);
				}
			}
		};

		frame.addComponentListener(new ComponentAdapter() {
			public void componentResized(ComponentEvent cE) {
				setHei(frame.getHeight());
				setWid(frame.getWidth());
				
			}
		});
		
		frame.addKeyListener(new KeyListener() {
			@Override
			public void keyTyped(KeyEvent e) {
			}

			@Override
			public void keyReleased(KeyEvent e) {
			}

			@Override
			public void keyPressed(KeyEvent e) {
				String key = KeyEvent.getKeyText(e.getKeyCode());
				if (!snake.getEnd()) {
					if (key == "Up")
						snake.up();
					else if (key == "Down")
						snake.down();
					else if (key == "Right")
						snake.right();
					else if (key == "Left")
						snake.left();
					frame.repaint();
				} else {
					snake.setEnd(false);
					t.restart();
					snake = new Snake();
					frame.repaint();
					System.out.println("restarted");
				}
			}
		});
		frame.setFocusable(true);
		frame.setFocusTraversalKeysEnabled(false);

		frame.getContentPane().add(pn);
		frame.setVisible(true);
		frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
		System.out.println(frame.getHeight());
	}

	public static void main(String[] args) {
		new Game();
	}
	

	public static int getWid() {
		return wid;
	}

	public static void setWid(int wid) {
		Game.wid = wid;
	}

	public static int getHei() {
		return hei;
	}

	public static void setHei(int hei) {
		Game.hei = hei;
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		frame.repaint();
		snake.update();
	}

}
